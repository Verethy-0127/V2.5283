[gcode_macro Magprobe_Variables]

# Dock location and docking distances.
variable_dock_location_x: 6
variable_dock_location_y: 298
variable_dock_safe_distance_y: 20       ;safe distance in Y when docking speed engages
variable_dock_safe_distance_x: 40       ;safe distance in X when docking speed engages

# Movement speeds (all in mm/min).
variable_travel_speed: 12000         ; XY travel speeds to approach the dock.
variable_dock_speed: 2000           ; XY docking speeds while attaching/docking probe.
variable_travel_speed_z: 1800        ; Z travel speeds to approach the dock.
variable_dock_speed_z: 100          ; Z travel speeds to approach the dock.

# Z clearance when homing.
variable_clearance_z: 20

# Set your build plate XY size for homing in the center.
variable_build_area_x: 300
variable_build_area_y: 300
variable_home_x: 150
variable_home_y: 150

# This macro bundles up homing and other klipper functions that uses probing and executes
# them consecutively without attaching/docking the probe everytime . Uncomment what bed
# levelling feature you need or add other macros/features to it as you please. Call it
# in your print start, end and cancel macros.

# An example print start macro could look like this:
#[gcode_macro PRINT_START]
#gcode:
#   CHECK_PROBE_DETACHED
#   G32
[gcode_macro G32]
gcode:
    SET_GCODE_VARIABLE MACRO=Magprobe_Variables VARIABLE=consecutive_probing VALUE=True
    BED_MESH_CLEAR
    #SET_SKEW CLEAR=1
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    QUAD_GANTRY_LEVEL
    # BED_TILT_CALIBRATE
    # Z_TILT_ADJUST
    G28 Z
    DOCK_PROBE              ; this is needed to dock the probe everything is done.
    SET_GCODE_VARIABLE MACRO=Magprobe_Variables VARIABLE=consecutive_probing VALUE=False

[gcode_macro QGL_AND_MESH]
gcode:
    SET_GCODE_VARIABLE MACRO=Magprobe_Variables VARIABLE=consecutive_probing VALUE=True
    BED_MESH_CLEAR
    #SET_SKEW CLEAR=1
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    QUAD_GANTRY_LEVEL
    G28 Z
    BED_MESH_CALIBRATE
    G28 Z
    DOCK_PROBE              ; this is needed to dock the probe everything is done.
    SET_GCODE_VARIABLE MACRO=Magprobe_Variables VARIABLE=consecutive_probing VALUE=False

#################################################################################
#################################################################################
### QGL, Bed mesh, z tilt, bed tilt. Uncomment what bed calibration you need. ###
#################################################################################
#################################################################################

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    {% set probe_consec = printer["gcode_macro Magprobe_Variables"].consecutive_probing %}
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    ATTACH_PROBE
    _QUAD_GANTRY_LEVEL{% for p in params %} {'%s=%s' % (p, params[p])}{% endfor %}
    {% if not probe_consec %}
        DOCK_PROBE
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set probe_consec = printer["gcode_macro Magprobe_Variables"].consecutive_probing %}
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    ATTACH_PROBE
    _BED_MESH_CALIBRATE{% for p in params %} {'%s=%s' % (p, params[p])}{% endfor %}
    {% if not probe_consec %}
        DOCK_PROBE
    {% endif %}


####################################################################################################
####################################################################################################
### Nothing needs to be changed below unless you want to play with the code.
####################################################################################################
####################################################################################################

# Variable that can be called with a SET_GCODE_VARIABLE. It allows consecutive commands like homing,
# qgl, bed tilt etc. to be carried out without constantly attaching and docking the probe in between
# each command. Do not change it below!
[gcode_macro Magprobe_Variables]
variable_consecutive_probing: False

gcode:

#######################
### Homing Override ###
#######################

# enable to SET_KINEMATIC_POSITION for Z hop
[force_move]
enable_force_move: True

[homing_override]
axes: xyz
gcode:
	#   Get Boundaries & check magprobe variables
    {% set home_x = printer["gcode_macro Magprobe_Variables"].home_x|float %}
    {% set home_y = printer["gcode_macro Magprobe_Variables"].home_y|float %}
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set probe_consec = printer["gcode_macro Magprobe_Variables"].consecutive_probing %}
    {% set TravelSpd = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
    {% set TravelSpdZ = printer["gcode_macro Magprobe_Variables"].travel_speed_z|float %}
    {% set probe_x = printer.configfile.config.probe.x_offset|float %}
    {% set probe_y = printer.configfile.config.probe.y_offset|float %}
    {% set probe_z = printer.configfile.config.probe.z_offset|float %}
    {% set z_clear = printer["gcode_macro Magprobe_Variables"].clearance_z|float %}

    G90                                                 ; absolute mode

    {% if (not 'z' in printer.toolhead.homed_axes) %}
        SET_KINEMATIC_POSITION Z=0
        G0 Z{z_clear + probe_z} F{TravelSpdZ}
    {% endif %}

    {% if not 'X' in params
    and not 'Y' in params
    and not 'Z' in params %}
        G28 X                                            ; home X
        G1 X{max_x - 10} F{TravelSpd}                     ; retract 5mm away from X max
        M400
        G28 Y                                            ; Home Y axis
        G1 Y{max_y - 10}                                  ; retract 5mm away from X max
        ATTACH_PROBE                                     ; attach magprobe
        M400
        G1 X{home_x - probe_x} Y{home_y - probe_y} F{TravelSpd}   ; move to middle
        G28 Z                                            ; home Z
        G0 Z{z_clear + probe_z} F{TravelSpdZ}            ; move away from bed by probe z offset and z clear
        {% if not probe_consec %}
            DOCK_PROBE                                  ; dock magprobe
        {% endif %}
    {% endif %}

    {% if 'X' in params or 'X0' in params %}
        M400
        G28 X
    {% endif %}

    {% if 'Y' in params or 'Y0' in params %}
        M400
        G28 Y
    {% endif %}

    {% if 'Z' in params or 'Z0' in params %}
        M400
        {% if "xy" not in printer.toolhead.homed_axes %}
            G28 X
            G28 Y
        {% endif %}
        ATTACH_PROBE                                    ; attach magprobe
        G1 X{home_x - probe_x} Y{home_y - probe_y} F{TravelSpd}   ; move to middle
        G28 Z                                           ; home Z
        G0 Z{z_clear + probe_z} F{TravelSpdZ}           ; move away from bed by probe z offset and z clear
        {% if not probe_consec %}
            DOCK_PROBE                                  ; dock magprobe
        {% endif %}
    {% endif %}


#####################################################################
### Attaching and docking probe, probe check status, misc. macros ###
#####################################################################

[gcode_macro ATTACH_PROBE]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
      G28
  {% endif %}
  QUERY_PROBE
  PROBE_ATTACH_SEQUENCE

[gcode_macro PROBE_ATTACH_SEQUENCE]
gcode:
    # set some params referencing magprobe variables so that it's easier to type
    {% set DockX = printer["gcode_macro Magprobe_Variables"].dock_location_x|float %}
    {% set DockY = printer["gcode_macro Magprobe_Variables"].dock_location_y|float %}
    {% set TravelSpd = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
    {% set DockSpd = printer["gcode_macro Magprobe_Variables"].dock_speed|float %}
    {% set TravelkSpdZ = printer["gcode_macro Magprobe_Variables"].travel_speed_z|float %}
    {% set probe_z = printer.configfile.config["probe"]["z_offset"]|float %}
    {% set z_clear = printer["gcode_macro Magprobe_Variables"].clearance_z|float %}
    {% set approach_x = printer["gcode_macro Magprobe_Variables"].dock_safe_distance_x|float %}
    {% set approach_y = printer["gcode_macro Magprobe_Variables"].dock_safe_distance_y|float %}

    G90                         ; absolute positioning

    {% if printer.probe.last_query %}
        # If the toolhead is behind the dock, move forwards in Y first
        {% if printer.toolhead.position.y >= (DockY - 20) %}
            G1 Y{DockY - 20} F{TravelSpd}
        {% endif %}

        G1 X{DockX} F{TravelSpd}
        G1 Y{DockY - approach_y}
        G1 Y{DockY} F{DockSpd}
        G4 P500
        G1 X{DockX + approach_x}
        CHECK_PROBE_ATTACHED
    {% endif %}


[gcode_macro DOCK_PROBE]
gcode:
    # set some params referencing magprobe variables so that it's easier to type
    {% set DockX = printer["gcode_macro Magprobe_Variables"].dock_location_x|float %}
    {% set DockY = printer["gcode_macro Magprobe_Variables"].dock_location_y|float %}
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set TravelSpd = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
    {% set DockSpd = printer["gcode_macro Magprobe_Variables"].dock_speed|float %}
    {% set TravelkSpdZ = printer["gcode_macro Magprobe_Variables"].travel_speed_z|float %}
    {% set probe_z = printer.configfile.config["probe"]["z_offset"]|float %}
    {% set z_clear = printer["gcode_macro Magprobe_Variables"].clearance_z|float %}
    {% set approach_y = printer["gcode_macro Magprobe_Variables"].dock_safe_distance_y|float %}
    {% set decouple_x = printer["gcode_macro Magprobe_Variables"].dock_safe_distance_x|float %}

    G90                         ; absolute positioning
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    # If the toolhead is behind the dock, move forwards in Y first
    {% if printer.toolhead.position.y >= (DockY - 20) %}
        G1 Y{DockY - 20} F{TravelSpd}
    {% endif %}

    # If the toolhead is to the left of the dock, move to the right first
    {% if printer.toolhead.position.x < (DockX + decouple_x) %}
        G1 X{DockX + decouple_x} F{TravelSpd}
    {% endif %}

    G1 Y{DockY} F{TravelSpd}
    G1 X{DockX + decouple_x} F{TravelSpd}
    G1 X{DockX} F{DockSpd}

    G1 Y{DockY - approach_y}
    CHECK_PROBE_DETACHED

[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
    {% set build_x = printer["gcode_macro Magprobe_Variables"].build_area_x|float %}
    {% set build_y = printer["gcode_macro Magprobe_Variables"].build_area_y|float %}
    {% set probe_z = printer.configfile.config.probe.z_offset|float %}
    {% set TravelSpd = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}

    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    ATTACH_PROBE
    G1 X{build_x / 2} Y{build_y / 2} F{TravelSpd}
    _PROBE_CALIBRATE{% for p in params %} {'%s=%s' % (p, params[p])}{% endfor %}
    M400
    { action_respond_info("Please manually detach probe before calibrating with TESTZ.
    Remember to put the probe back in the dock!") }
    G1 Z{probe_z + 30}

# [gcode_macro PROBE_ACCURACY]
# rename_existing: _PROBE_ACCURACY
# gcode:
#     {% set build_x = printer["gcode_macro Magprobe_Variables"].build_area_x|float %}
#     {% set build_y = printer["gcode_macro Magprobe_Variables"].build_area_y|float %}
#     {% set probe_x = printer.configfile.config.probe.x_offset|float %}
#     {% set probe_y = printer.configfile.config.probe.y_offset|float %}
#     {% set TravelSpd = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
#     {% set x_pos = params.X|default(-1)|float %}
#     {% set y_pos = params.Y|default(-1)|float %}

#     {% if x_pos == -1 or y_pos == -1 %}
#         {% set x_pos = build_x / 2 - probe_x %}
#         {% set y_pos = build_y / 2 - probe_y %}
#     {% endif %}

#     {% if "xyz" not in printer.toolhead.homed_axes %}
#         G28
#     {% endif %}
#     ATTACH_PROBE
#     G1 X{x_pos} Y{y_pos} F{TravelSpd}
#     _PROBE_ACCURACY{% for p in params %} {'%s=%s' % (p, params[p])}{% endfor %}
#     DOCK_PROBE

### Error Checking Macros. ###

[gcode_macro CHECK_PROBE_ATTACHED]
#sanity check if probe is attached, if not it will throw out an error.
gcode:
    QUERY_PROBE
    PROBE_ATTACH_SANITY_CHECK

[gcode_macro CHECK_PROBE_DETACHED]
#sanity check if probe is detached, if not it will throw out an error.
gcode:
    QUERY_PROBE
    PROBE_DETACH_SANITY_CHECK

[gcode_macro PROBE_ATTACH_SANITY_CHECK]
gcode:
	{% if printer.probe.last_query %}
        {action_raise_error("Probe is missing/connection issue!")}
    {% endif %}

[gcode_macro PROBE_DETACH_SANITY_CHECK]
gcode:
	{% if not printer.probe.last_query %}
        {action_raise_error("Probe is attached! Beware of collisions!")}
    {% endif %}
